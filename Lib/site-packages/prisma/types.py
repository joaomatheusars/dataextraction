# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Product types

class ProductOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Product create method"""
    id: _int
    History: 'Product_HistoryCreateManyNestedWithoutRelationsInput'


class ProductCreateInput(ProductOptionalCreateInput):
    """Required arguments to the Product create method"""
    Nome: _str
    link: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProductOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Product create method, without relations"""
    id: _int


class ProductCreateWithoutRelationsInput(ProductOptionalCreateWithoutRelationsInput):
    """Required arguments to the Product create method, without relations"""
    Nome: _str
    link: _str


class ProductCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'


class ProductCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProductCreateWithoutRelationsInput', List['ProductCreateWithoutRelationsInput']]
    connect: Union['ProductWhereUniqueInput', List['ProductWhereUniqueInput']]


_ProductWhereUnique_id_Input = TypedDict(
    '_ProductWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ProductWhereUniqueInput = _ProductWhereUnique_id_Input


class ProductUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    Nome: _str
    link: _str
    History: 'Product_HistoryUpdateManyWithoutRelationsInput'


class ProductUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    Nome: _str
    link: _str


class ProductUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProductCreateWithoutRelationsInput']
    connect: List['ProductWhereUniqueInput']
    set: List['ProductWhereUniqueInput']
    disconnect: List['ProductWhereUniqueInput']
    delete: List['ProductWhereUniqueInput']

    # TODO
    # update: List['ProductUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProductUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProductScalarWhereInput']
    # upsert: List['ProductUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ProductCreateOrConnectWithoutRelationsInput']


class ProductUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProductUpdateInput'
    # upsert: 'ProductUpsertWithoutRelationsInput'
    # connectOrCreate: 'ProductCreateOrConnectWithoutRelationsInput'


class ProductUpsertInput(TypedDict):
    create: 'ProductCreateInput'
    update: 'ProductUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Product_id_OrderByInput = TypedDict(
    '_Product_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Product_Nome_OrderByInput = TypedDict(
    '_Product_Nome_OrderByInput',
    {
        'Nome': 'SortOrder',
    },
    total=True
)

_Product_link_OrderByInput = TypedDict(
    '_Product_link_OrderByInput',
    {
        'link': 'SortOrder',
    },
    total=True
)

ProductOrderByInput = Union[
    '_Product_id_OrderByInput',
    '_Product_Nome_OrderByInput',
    '_Product_link_OrderByInput',
]



# recursive Product types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProductRelationFilter = TypedDict(
    'ProductRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProductListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProductInclude(TypedDict, total=False):
    """Product relational arguments"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProduct']


    

class ProductIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProductRecursive1']


class ProductIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProductRecursive2']


class ProductIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProductRecursive3']


class ProductIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProductRecursive4']


class ProductIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class Product_HistoryIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive1']


class Product_HistoryIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive2']


class Product_HistoryIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive3']


class Product_HistoryIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    product: Union[bool, 'ProductArgsFromProductRecursive4']


class Product_HistoryIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class Product_HistoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive1'


class Product_HistoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive2'


class Product_HistoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive3'


class Product_HistoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive4'


class Product_HistoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyProduct_HistoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive1'


class FindManyProduct_HistoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive2'


class FindManyProduct_HistoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive3'


class FindManyProduct_HistoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive4'


class FindManyProduct_HistoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    


FindManyProductArgs = FindManyProductArgsFromProduct
FindFirstProductArgs = FindManyProductArgsFromProduct


    

class ProductWhereInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    Nome: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']
    History: 'Product_HistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive1', List['ProductWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive1']
    OR: List['ProductWhereInputRecursive1']
    NOT: List['ProductWhereInputRecursive1']


class ProductWhereInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    Nome: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']
    History: 'Product_HistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive2', List['ProductWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive2']
    OR: List['ProductWhereInputRecursive2']
    NOT: List['ProductWhereInputRecursive2']


class ProductWhereInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    Nome: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']
    History: 'Product_HistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive3', List['ProductWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive3']
    OR: List['ProductWhereInputRecursive3']
    NOT: List['ProductWhereInputRecursive3']


class ProductWhereInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    Nome: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']
    History: 'Product_HistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive4', List['ProductWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive4']
    OR: List['ProductWhereInputRecursive4']
    NOT: List['ProductWhereInputRecursive4']


class ProductWhereInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    Nome: Union[_str, 'types.StringFilter']
    link: Union[_str, 'types.StringFilter']
    History: 'Product_HistoryListRelationFilter'



# aggregate Product types


    

class ProductScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    Nome: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive1']


class ProductScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    Nome: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive2']


class ProductScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    Nome: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive3']


class ProductScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    Nome: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive4']


class ProductScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    Nome: Union[_str, 'types.StringWithAggregatesFilter']
    link: Union[_str, 'types.StringWithAggregatesFilter']



class ProductGroupByOutput(TypedDict, total=False):
    id: _int
    Nome: _str
    link: _str
    _sum: 'ProductSumAggregateOutput'
    _avg: 'ProductAvgAggregateOutput'
    _min: 'ProductMinAggregateOutput'
    _max: 'ProductMaxAggregateOutput'
    _count: 'ProductCountAggregateOutput'


class ProductAvgAggregateOutput(TypedDict, total=False):
    """Product output for aggregating averages"""
    id: float


class ProductSumAggregateOutput(TypedDict, total=False):
    """Product output for aggregating sums"""
    id: _int


class ProductScalarAggregateOutput(TypedDict, total=False):
    """Product output including scalar fields"""
    id: _int
    Nome: _str
    link: _str


ProductMinAggregateOutput = ProductScalarAggregateOutput
ProductMaxAggregateOutput = ProductScalarAggregateOutput


class ProductMaxAggregateInput(TypedDict, total=False):
    """Product input for aggregating by max"""
    id: bool
    Nome: bool
    link: bool


class ProductMinAggregateInput(TypedDict, total=False):
    """Product input for aggregating by min"""
    id: bool
    Nome: bool
    link: bool


class ProductNumberAggregateInput(TypedDict, total=False):
    """Product input for aggregating numbers"""
    id: bool


ProductAvgAggregateInput = ProductNumberAggregateInput
ProductSumAggregateInput = ProductNumberAggregateInput


ProductCountAggregateInput = TypedDict(
    'ProductCountAggregateInput',
    {
        'id': bool,
        'Nome': bool,
        'link': bool,
        '_all': bool,
    },
    total=False,
)

ProductCountAggregateOutput = TypedDict(
    'ProductCountAggregateOutput',
    {
        'id': int,
        'Nome': int,
        'link': int,
        '_all': int,
    },
    total=False,
)


ProductKeys = Literal[
    'id',
    'Nome',
    'link',
    'History',
]
ProductScalarFieldKeys = Literal[
    'id',
    'Nome',
    'link',
]
ProductScalarFieldKeysT = TypeVar('ProductScalarFieldKeysT', bound=ProductScalarFieldKeys)

ProductRelationalFieldKeys = Literal[
        'History',
    ]

# Product_History types

class Product_HistoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Product_History create method"""
    id: _str
    productId: _int
    product: 'ProductCreateNestedWithoutRelationsInput'


class Product_HistoryCreateInput(Product_HistoryOptionalCreateInput):
    """Required arguments to the Product_History create method"""
    dia: _str
    preco: _str
    avista: _str
    parcelado: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class Product_HistoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Product_History create method, without relations"""
    id: _str
    productId: _int


class Product_HistoryCreateWithoutRelationsInput(Product_HistoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Product_History create method, without relations"""
    dia: _str
    preco: _str
    avista: _str
    parcelado: _str


class Product_HistoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'Product_HistoryCreateWithoutRelationsInput'
    connect: 'Product_HistoryWhereUniqueInput'


class Product_HistoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['Product_HistoryCreateWithoutRelationsInput', List['Product_HistoryCreateWithoutRelationsInput']]
    connect: Union['Product_HistoryWhereUniqueInput', List['Product_HistoryWhereUniqueInput']]


_Product_HistoryWhereUnique_id_Input = TypedDict(
    '_Product_HistoryWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

Product_HistoryWhereUniqueInput = _Product_HistoryWhereUnique_id_Input


class Product_HistoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    dia: _str
    preco: _str
    avista: _str
    parcelado: _str
    product: 'ProductUpdateOneWithoutRelationsInput'


class Product_HistoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    dia: _str
    preco: _str
    avista: _str
    parcelado: _str


class Product_HistoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['Product_HistoryCreateWithoutRelationsInput']
    connect: List['Product_HistoryWhereUniqueInput']
    set: List['Product_HistoryWhereUniqueInput']
    disconnect: List['Product_HistoryWhereUniqueInput']
    delete: List['Product_HistoryWhereUniqueInput']

    # TODO
    # update: List['Product_HistoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['Product_HistoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['Product_HistoryScalarWhereInput']
    # upsert: List['Product_HistoryUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['Product_HistoryCreateOrConnectWithoutRelationsInput']


class Product_HistoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'Product_HistoryCreateWithoutRelationsInput'
    connect: 'Product_HistoryWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'Product_HistoryUpdateInput'
    # upsert: 'Product_HistoryUpsertWithoutRelationsInput'
    # connectOrCreate: 'Product_HistoryCreateOrConnectWithoutRelationsInput'


class Product_HistoryUpsertInput(TypedDict):
    create: 'Product_HistoryCreateInput'
    update: 'Product_HistoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Product_History_id_OrderByInput = TypedDict(
    '_Product_History_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Product_History_dia_OrderByInput = TypedDict(
    '_Product_History_dia_OrderByInput',
    {
        'dia': 'SortOrder',
    },
    total=True
)

_Product_History_preco_OrderByInput = TypedDict(
    '_Product_History_preco_OrderByInput',
    {
        'preco': 'SortOrder',
    },
    total=True
)

_Product_History_avista_OrderByInput = TypedDict(
    '_Product_History_avista_OrderByInput',
    {
        'avista': 'SortOrder',
    },
    total=True
)

_Product_History_parcelado_OrderByInput = TypedDict(
    '_Product_History_parcelado_OrderByInput',
    {
        'parcelado': 'SortOrder',
    },
    total=True
)

_Product_History_productId_OrderByInput = TypedDict(
    '_Product_History_productId_OrderByInput',
    {
        'productId': 'SortOrder',
    },
    total=True
)

Product_HistoryOrderByInput = Union[
    '_Product_History_id_OrderByInput',
    '_Product_History_dia_OrderByInput',
    '_Product_History_preco_OrderByInput',
    '_Product_History_avista_OrderByInput',
    '_Product_History_parcelado_OrderByInput',
    '_Product_History_productId_OrderByInput',
]



# recursive Product_History types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

Product_HistoryRelationFilter = TypedDict(
    'Product_HistoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class Product_HistoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class Product_HistoryInclude(TypedDict, total=False):
    """Product_History relational arguments"""
    product: Union[bool, 'ProductArgsFromProduct_History']


    

class ProductIncludeFromProduct_History(TypedDict, total=False):
    """Relational arguments for Product_History"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProduct_HistoryRecursive1']


class ProductIncludeFromProduct_HistoryRecursive1(TypedDict, total=False):
    """Relational arguments for Product_History"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProduct_HistoryRecursive2']


class ProductIncludeFromProduct_HistoryRecursive2(TypedDict, total=False):
    """Relational arguments for Product_History"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProduct_HistoryRecursive3']


class ProductIncludeFromProduct_HistoryRecursive3(TypedDict, total=False):
    """Relational arguments for Product_History"""
    History: Union[bool, 'FindManyProduct_HistoryArgsFromProduct_HistoryRecursive4']


class ProductIncludeFromProduct_HistoryRecursive4(TypedDict, total=False):
    """Relational arguments for Product_History"""

    

class ProductArgsFromProduct_History(TypedDict, total=False):
    """Arguments for Product_History"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromProduct_HistoryRecursive1(TypedDict, total=False):
    """Arguments for Product_History"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromProduct_HistoryRecursive2(TypedDict, total=False):
    """Arguments for Product_History"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromProduct_HistoryRecursive3(TypedDict, total=False):
    """Arguments for Product_History"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromProduct_HistoryRecursive4(TypedDict, total=False):
    """Arguments for Product_History"""
    
    

class FindManyProductArgsFromProduct_History(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromProduct_HistoryRecursive1(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromProduct_HistoryRecursive2(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromProduct_HistoryRecursive3(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromProduct_HistoryRecursive4(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class Product_HistoryIncludeFromProduct_History(TypedDict, total=False):
    """Relational arguments for Product_History"""
    product: Union[bool, 'ProductArgsFromProduct_HistoryRecursive1']


class Product_HistoryIncludeFromProduct_HistoryRecursive1(TypedDict, total=False):
    """Relational arguments for Product_History"""
    product: Union[bool, 'ProductArgsFromProduct_HistoryRecursive2']


class Product_HistoryIncludeFromProduct_HistoryRecursive2(TypedDict, total=False):
    """Relational arguments for Product_History"""
    product: Union[bool, 'ProductArgsFromProduct_HistoryRecursive3']


class Product_HistoryIncludeFromProduct_HistoryRecursive3(TypedDict, total=False):
    """Relational arguments for Product_History"""
    product: Union[bool, 'ProductArgsFromProduct_HistoryRecursive4']


class Product_HistoryIncludeFromProduct_HistoryRecursive4(TypedDict, total=False):
    """Relational arguments for Product_History"""

    

class Product_HistoryArgsFromProduct_History(TypedDict, total=False):
    """Arguments for Product_History"""
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive1'


class Product_HistoryArgsFromProduct_HistoryRecursive1(TypedDict, total=False):
    """Arguments for Product_History"""
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive2'


class Product_HistoryArgsFromProduct_HistoryRecursive2(TypedDict, total=False):
    """Arguments for Product_History"""
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive3'


class Product_HistoryArgsFromProduct_HistoryRecursive3(TypedDict, total=False):
    """Arguments for Product_History"""
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive4'


class Product_HistoryArgsFromProduct_HistoryRecursive4(TypedDict, total=False):
    """Arguments for Product_History"""
    
    

class FindManyProduct_HistoryArgsFromProduct_History(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive1'


class FindManyProduct_HistoryArgsFromProduct_HistoryRecursive1(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive2'


class FindManyProduct_HistoryArgsFromProduct_HistoryRecursive2(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive3'


class FindManyProduct_HistoryArgsFromProduct_HistoryRecursive3(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    include: 'Product_HistoryIncludeFromProduct_HistoryRecursive4'


class FindManyProduct_HistoryArgsFromProduct_HistoryRecursive4(TypedDict, total=False):
    """Arguments for Product_History"""
    take: int
    skip: int
    order_by: Union['Product_HistoryOrderByInput', List['Product_HistoryOrderByInput']]
    where: 'Product_HistoryWhereInput'
    cursor: 'Product_HistoryWhereUniqueInput'
    distinct: List['Product_HistoryScalarFieldKeys']
    


FindManyProduct_HistoryArgs = FindManyProduct_HistoryArgsFromProduct_History
FindFirstProduct_HistoryArgs = FindManyProduct_HistoryArgsFromProduct_History


    

class Product_HistoryWhereInput(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    dia: Union[_str, 'types.StringFilter']
    preco: Union[_str, 'types.StringFilter']
    avista: Union[_str, 'types.StringFilter']
    parcelado: Union[_str, 'types.StringFilter']
    productId: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'

    # should be noted that AND and NOT should be Union['Product_HistoryWhereInputRecursive1', List['Product_HistoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['Product_HistoryWhereInputRecursive1']
    OR: List['Product_HistoryWhereInputRecursive1']
    NOT: List['Product_HistoryWhereInputRecursive1']


class Product_HistoryWhereInputRecursive1(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    dia: Union[_str, 'types.StringFilter']
    preco: Union[_str, 'types.StringFilter']
    avista: Union[_str, 'types.StringFilter']
    parcelado: Union[_str, 'types.StringFilter']
    productId: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'

    # should be noted that AND and NOT should be Union['Product_HistoryWhereInputRecursive2', List['Product_HistoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['Product_HistoryWhereInputRecursive2']
    OR: List['Product_HistoryWhereInputRecursive2']
    NOT: List['Product_HistoryWhereInputRecursive2']


class Product_HistoryWhereInputRecursive2(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    dia: Union[_str, 'types.StringFilter']
    preco: Union[_str, 'types.StringFilter']
    avista: Union[_str, 'types.StringFilter']
    parcelado: Union[_str, 'types.StringFilter']
    productId: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'

    # should be noted that AND and NOT should be Union['Product_HistoryWhereInputRecursive3', List['Product_HistoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['Product_HistoryWhereInputRecursive3']
    OR: List['Product_HistoryWhereInputRecursive3']
    NOT: List['Product_HistoryWhereInputRecursive3']


class Product_HistoryWhereInputRecursive3(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    dia: Union[_str, 'types.StringFilter']
    preco: Union[_str, 'types.StringFilter']
    avista: Union[_str, 'types.StringFilter']
    parcelado: Union[_str, 'types.StringFilter']
    productId: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'

    # should be noted that AND and NOT should be Union['Product_HistoryWhereInputRecursive4', List['Product_HistoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['Product_HistoryWhereInputRecursive4']
    OR: List['Product_HistoryWhereInputRecursive4']
    NOT: List['Product_HistoryWhereInputRecursive4']


class Product_HistoryWhereInputRecursive4(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    dia: Union[_str, 'types.StringFilter']
    preco: Union[_str, 'types.StringFilter']
    avista: Union[_str, 'types.StringFilter']
    parcelado: Union[_str, 'types.StringFilter']
    productId: Union[_int, 'types.IntFilter']
    product: 'ProductRelationFilter'



# aggregate Product_History types


    

class Product_HistoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    dia: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_str, 'types.StringWithAggregatesFilter']
    avista: Union[_str, 'types.StringWithAggregatesFilter']
    parcelado: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['Product_HistoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['Product_HistoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['Product_HistoryScalarWhereWithAggregatesInputRecursive1']


class Product_HistoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    dia: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_str, 'types.StringWithAggregatesFilter']
    avista: Union[_str, 'types.StringWithAggregatesFilter']
    parcelado: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['Product_HistoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['Product_HistoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['Product_HistoryScalarWhereWithAggregatesInputRecursive2']


class Product_HistoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    dia: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_str, 'types.StringWithAggregatesFilter']
    avista: Union[_str, 'types.StringWithAggregatesFilter']
    parcelado: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['Product_HistoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['Product_HistoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['Product_HistoryScalarWhereWithAggregatesInputRecursive3']


class Product_HistoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    dia: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_str, 'types.StringWithAggregatesFilter']
    avista: Union[_str, 'types.StringWithAggregatesFilter']
    parcelado: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['Product_HistoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['Product_HistoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['Product_HistoryScalarWhereWithAggregatesInputRecursive4']


class Product_HistoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Product_History arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    dia: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_str, 'types.StringWithAggregatesFilter']
    avista: Union[_str, 'types.StringWithAggregatesFilter']
    parcelado: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_int, 'types.IntWithAggregatesFilter']



class Product_HistoryGroupByOutput(TypedDict, total=False):
    id: _str
    dia: _str
    preco: _str
    avista: _str
    parcelado: _str
    productId: _int
    _sum: 'Product_HistorySumAggregateOutput'
    _avg: 'Product_HistoryAvgAggregateOutput'
    _min: 'Product_HistoryMinAggregateOutput'
    _max: 'Product_HistoryMaxAggregateOutput'
    _count: 'Product_HistoryCountAggregateOutput'


class Product_HistoryAvgAggregateOutput(TypedDict, total=False):
    """Product_History output for aggregating averages"""
    productId: float


class Product_HistorySumAggregateOutput(TypedDict, total=False):
    """Product_History output for aggregating sums"""
    productId: _int


class Product_HistoryScalarAggregateOutput(TypedDict, total=False):
    """Product_History output including scalar fields"""
    id: _str
    dia: _str
    preco: _str
    avista: _str
    parcelado: _str
    productId: _int


Product_HistoryMinAggregateOutput = Product_HistoryScalarAggregateOutput
Product_HistoryMaxAggregateOutput = Product_HistoryScalarAggregateOutput


class Product_HistoryMaxAggregateInput(TypedDict, total=False):
    """Product_History input for aggregating by max"""
    id: bool
    dia: bool
    preco: bool
    avista: bool
    parcelado: bool
    productId: bool


class Product_HistoryMinAggregateInput(TypedDict, total=False):
    """Product_History input for aggregating by min"""
    id: bool
    dia: bool
    preco: bool
    avista: bool
    parcelado: bool
    productId: bool


class Product_HistoryNumberAggregateInput(TypedDict, total=False):
    """Product_History input for aggregating numbers"""
    productId: bool


Product_HistoryAvgAggregateInput = Product_HistoryNumberAggregateInput
Product_HistorySumAggregateInput = Product_HistoryNumberAggregateInput


Product_HistoryCountAggregateInput = TypedDict(
    'Product_HistoryCountAggregateInput',
    {
        'id': bool,
        'dia': bool,
        'preco': bool,
        'avista': bool,
        'parcelado': bool,
        'productId': bool,
        '_all': bool,
    },
    total=False,
)

Product_HistoryCountAggregateOutput = TypedDict(
    'Product_HistoryCountAggregateOutput',
    {
        'id': int,
        'dia': int,
        'preco': int,
        'avista': int,
        'parcelado': int,
        'productId': int,
        '_all': int,
    },
    total=False,
)


Product_HistoryKeys = Literal[
    'id',
    'dia',
    'preco',
    'avista',
    'parcelado',
    'productId',
    'product',
]
Product_HistoryScalarFieldKeys = Literal[
    'id',
    'dia',
    'preco',
    'avista',
    'parcelado',
    'productId',
]
Product_HistoryScalarFieldKeysT = TypeVar('Product_HistoryScalarFieldKeysT', bound=Product_HistoryScalarFieldKeys)

Product_HistoryRelationalFieldKeys = Literal[
        'product',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields